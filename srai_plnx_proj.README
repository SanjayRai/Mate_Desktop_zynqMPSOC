Based on Vivado and PetaLinux 2018.1

1. Create a ZynQ MPSOC Block diagram in Vivado IPI and configure it for the board.
2. Generate the Bitfile and Export Hardware (along with the bitfile). This create a HDF file (location = HDK_Export)


Create a generic petaLinux project structure.
    > petalinux-create -t project -n petalinux_Project_name --template zynqMP


Point to the directory where the .hdf file is located. THis file would have been exported by Vivado (IPI Design)
    > cd petalinux_Project_name
    > petalinux-config --get-hw-description=../../HDK_export
        Configure CONFIG_SUBSYSTEM_MACHINE_NAME per UG1144 (v2018.1) Page 22
        ie, DTG Settings ---> <template>
         <template> being on of kc705_lite, zc1751-dc1, zc706, ...... zcu104-revc, zcu106-reva, zcu102-rev1.0 
         (Choose zcu102-rev1.0 for latest ZCU102 with Prod. Si)
          /* This includes the XIlinx created dtsi file in the device-tree directory. For Example selecting zcu104-revc  creates a file called 
          plnx_workspace/device-tree/device-tree/zcu104-revc.dtsi which will have all the MIO mapping , registers, IO specific delay and  properties for ZCU104 board */
          
          /* For any use  specific  settings use system-user.dtsi in the petalinux-proj/project-spec/meta-user/recepies-bsp/device-tree/files directory */

         Configure rootfs to be in the SD partiton 
            Image Packaging Configuration -> Root filesystem type ---> SD card (default would be INITRAMFS)

> petalinux-build

> petalinux-package --boot --format BIN --fsbl ./images/linux/zynqmp_fsbl.elf  --fpga ./images/linux/system.bit  --u-boot

Copy the BOOT.BIN and Image.ub  files to the SD Card.

mkdir Arch_linux
Arch_linux
wget os.archlinuxarm.org/os/ArchLinuxARM-aarch64-latest.tar.gz

create an SD card with 2 partions:
Partion 1 or Boot Partition should be FAT32 (about 1GB)
Partiton 2 can be ext3 or ext4 (rest of the SD Card atleast 1GB)

use gparted (or fdsik)

copy BOOT.BIN, boot.scr  and image.ub to Partition 1 (Boot partition) 
    > mount /dev/sdc1 /mnt/USB
    > cp BOOT.bin /mnt/USB
    > cp boot.scr /mnt/USB
    > cp image.ub /mnt/USB
    > umount /mnt/USB
extract the ArchLinuxARM-aarch64-latest.tar.gz to partiton 2 (ext3/4 partition)
 (mount the second partiton and use cp  or use dd to /dev/<disk_partition> )
 Eg:
    > mount /dev/sdc2 /mnt/USB2
    > tar -zxvf ArchLinuxARM-aarch64-latest.tar.gz --directory /mnt/USB2/
    > ls -ali /mnt/USB2  (We will see the Linux Directory Structure and FileSystem)
 log in as  root (passwd root)
 > useradd --create-home <user_name>
 > passwd <use_name>

 pacman  repository config file: (If this needs editing most likely not)
 /etc/pacman.conf
 /etc/pacman.d/mirrorlist
 Specifically use the ca.us.mirror.archlinuxarm.org site. MIght need to refresh pacman (pacman -Syyu a couple of times for it to pick up the latest versions in case of Pagake error  404 )
Login as root (root) 
> pacman-key --init
> pacman-key --populate archlinuxarm

 Update and upgarde repository (pacman --noconfirm -Syu <package>  to skip confirming)
    >pacman -Syyu 
    >pacman -Syu python 
    >pacman -Syu xorg
    >pacman -Syu xorg-server
    >pacman -Syu mate 
    >pacman -Syu mate-desktop
    >pacman -Syu mate-extra
    >pacman -Syu lxdm 
    >pacman -Syu gvim 
    >pacman -Syu tigervnc
    >pacman -Syu base-devel
    >pacman -Syu chromium  
    >pacman -Syu libreoffice  
    >pacman -S ttf-dejavu ttf-liberation noto-fonts
    >ln -s /etc/fonts/conf.avail/70-no-bitmaps.conf  /etc/fonts/conf.d
    >ln -s /etc/fonts/conf.avail/10-sub-pixel-rgb.conf  /etc/fonts/conf.d
    >ln -s /etc/fonts/conf.avail/11-lcdfilter-default.conf  /etc/fonts/conf.d
    Alppearance : Fonts (tab) -> Fixed width font -> select "Monospace regular 11" .
    Mate Desktop -> System -> Preferances -> Look and Feel -> 

 > vncserver :1
 > vncserver -kill :1
 modify the .vnc/xstartup to include /usr/bin/mate-session lxdm (inplace of twm)

backup and cloning  from _x86_host Linux  Desktop
Insert SdCard into a host Linux server, (assuming /dev/sdg)
dd if=/dev/sdg of=./<BackUpfile_name>.ext4

if the new SdCard is larger, use gparted to resixe/move the Partiton to claim the entire larger SdCard space.

MISC NOTES :
X11 forwarding for sudo users
Just setting the DISPLAY is not enough. X authentication is based on cookies, so itâ€™s necessary to set the cookie used by the user that initiated the connection. The following procedure allows a sudo user to use the ssh based X11 tunnel:

1. Connect the remote host using the -X option with ssh.

# ssh -X root@remote-host
2. Now list the coockie set for the current user.

# xauth list $DISPLAY
node01.thegeekdiary.com/unix:10  MIT-MAGIC-COOKIE-1  dacbc5765ec54a1d7115a172147866aa
# echo $DSIPLAY
localhost:10.0
3. Switch to another user account using sudo. Add the cookie from the command output above to the sudo user.

# sudo su - [user]
# xauth add node01.thegeekdiary.com/unix:10  MIT-MAGIC-COOKIE-1  dacbc5765ec54a1d7115a172147866aa
4. Export the display from step 2 again for the sudo user. Try the command xclock to verify if the x client applications are working as expected.

# export DISPLAY=localhost:10.0
# xclock

ArchLunix / Manjaro Llinux X11 Forwarding
1.  Install xorg-xauth and xorg-xhost
        > pacman -Syyu xorg-xauth
        > pacman -Syyu xorg-xhost
        
2. Edit  /etc/ssh/sshd_config file
   X11Forwarding yes
    AllowTcpForwarding yes
    X11UseLocalhost yes
    X11DisplayOffset 10

