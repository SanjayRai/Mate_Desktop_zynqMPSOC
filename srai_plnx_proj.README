Based on Vivado and PetaLinux 2018.1

1. Create a ZynQ MPSOC Block diagram in Vivado IPI and configure it for the board.
2. Generate the Bitfile and Export Hardware (along with the bitfile). This create a HDF file (location = HDK_Export)


Create a generic petaLinux project structure.
    > petalinux-create -t project -n petalinux_Project_name --template zynqMP


Point to the directory where the .hdf file is located. THis file would have been exported by Vivado (IPI Design)
    > cd petalinux_Project_name
    > petalinux-config --get-hw-description=../../HDK_export
        Configure CONFIG_SUBSYSTEM_MACHINE_NAME per UG1144 (v2018.1) Page 22
        ie, DTG Settings ---> <template>
         <template> being on of kc705_lite, zc1751-dc1, zc706, ...... zcu104-revc, zcu106-reva, zcu102-rev1.0 
         (Choose zcu102-rev1.0 for latest ZCU102 with Prod. Si)
          /* This includes the XIlinx created dtsi file in the device-tree directory. For Example selecting zcu104-revc  creates a file called 
          plnx_workspace/device-tree/device-tree/zcu104-revc.dtsi which will have all the MIO mapping , registers, IO specific delay and  properties for ZCU104 board */
          
          /* For any use  specific  settings use system-user.dtsi in the petalinux-proj/project-spec/meta-user/recepies-bsp/device-tree/files directory */

         Configure rootfs to be in the SD partiton 
            Image Packaging Configuration -> Root filesystem type ---> SD card (default would be INITRAMFS)



**** NOTE of OSPREO - Ethernet FMC card for  PL Ethernet controller.
    1. PL Ethernet with OSPREO  FMC card needs a  Tri-Mode  Ethernet  License from Xilinx  .

    2. Use the following  in the  ./petalinux_proj/project-spec/meta-user/recipes-bsp/device-tree/files/system-user.dtsi  :

                                /include/ "system-conf.dtsi"
                                / {
                                };
                                
                                &axi_ethernet_2 {  
                                    local-mac-address = [00 0a 35 00 01 23];  
                                    phy-handle = <&extphy2>;  
                                    xlnx,has-mdio = <0x1>;  
                                    phy-mode = "rgmii-rxid";  
                                    mdio {  
                                        #address-cells = <1>;  
                                        #size-cells = <0>;  
                                        extphy2: phy@0 {  
                                            device_type = "ethernet-phy";  
                                            reg = <0>;  
                                        };  
                                    };  
                                };  
                                  



> petalinux-build

> petalinux-package --boot --format BIN --fsbl ./images/linux/zynqmp_fsbl.elf  --fpga ./images/linux/system.bit  --u-boot

Side Note:  The final  device Tree will be called system.dtb (Device Tree Blob). To view this  you can use the tool calle d dtc (Device Tree Compiler)
>>  <full_path_to_peta_linux_install>/components/yocto/buildtools/sysroots/x86_64-petalinux-linux/usr/bin/dtc --in-format dtb --out-format dts -o srai.dts system.dtb

The following salient files that are produced :
BOOT.BIN (has  ATF, pmu firmware, uboot,  and PL Bitfile(system.bit) )


TO Use XIlinx EzMove SFTP service :
    Create a config file in ~sanjayr/.ssh directory and add the following :

Host ezmove.xilinx.com
    HostKeyAlgorithms +ssh-dss
image.ub (Linux Kernel image  and Device tree Blob)

Copy the BOOT.BIN and Image.ub  and boot.scr  files to the SD Card.

mkdir Arch_linux
Arch_linux
wget os.archlinuxarm.org/os/ArchLinuxARM-aarch64-latest.tar.gz

create an SD card with 2 partions:
Partion 1 or Boot Partition should be FAT32 (about 1GB)
Partiton 2 can be ext3 or ext4 (rest of the SD Card atleast 1GB)

use gparted (or fdsik)

copy BOOT.BIN, boot.scr  and image.ub to Partition 1 (Boot partition) 
    > mount /dev/sdc1 /mnt/USB
    > cp BOOT.bin /mnt/USB
    > cp boot.scr /mnt/USB
    > cp image.ub /mnt/USB
    > umount /mnt/USB
extract the ArchLinuxARM-aarch64-latest.tar.gz to partiton 2 (ext3/4 partition)
 (mount the second partiton and use cp  or use dd to /dev/<disk_partition> )
 Eg:
    > mount /dev/sdc2 /mnt/USB2
    > tar -zxvf ArchLinuxARM-aarch64-latest.tar.gz --directory /mnt/USB2/
    > sync   (Always use the sync command after writing to mounted SD / USB media ;  rootfs most likely will be corrupted without this: sync command might take a while (10 minsor so to return)
    > ls -ali /mnt/USB2  (We will see the Linux Directory Structure and FileSystem)
 log in as  root (passwd root)
 > useradd --create-home <user_name>
 > passwd <use_name>
 > usermod -aG root sanjayr (Gives Administrative privilages to user sanjayr)
 * Edit the /etc/sudoer file and add   the following  line
    sanjayr ALL=(ALL) ALL

 pacman  repository config file: (If this needs editing most likely not)
 /etc/pacman.conf
 /etc/pacman.d/mirrorlist
 Specifically use the ca.us.mirror.archlinuxarm.org site. MIght need to refresh pacman (pacman -Syyu a couple of times for it to pick up the latest versions in case of Pagake error  404 )
Login as root (root) 
> pacman-key --init
> pacman-key --populate archlinuxarm

 Update and upgarde repository (pacman --noconfirm -Syu <package>  to skip confirming). Use the attached  ArchLinux_pacman_install_packages  script )
    >pacman -Syyu 
    >pacman -Syu sudo 
    >pacman -Syu python 
    >pacman -Syu xorg
    >pacman -Syu xorg-server
    > pacman -Syyu xorg-xauth
    > pacman -Syyu xorg-xhost
    >pacman -Syu mate 
    >pacman -Syu mate-desktop
    >pacman -Syu mate-extra
    >pacman -Syu mate-tweak
    >pacman -Syu lxdm 
    >pacman -Syu gvim 
    >pacman -Syu tigervnc
    >pacman -Syu base-devel
    >pacman -Syu chromium  
    >pacman -Syu libreoffice  
    >pacman -Syyu gparted
      >pacman -Syyu usbutils
    >pacman -S ttf-dejavu ttf-liberation noto-fonts
    >ln -s /etc/fonts/conf.avail/70-no-bitmaps.conf  /etc/fonts/conf.d
    >ln -s /etc/fonts/conf.avail/10-sub-pixel-rgb.conf  /etc/fonts/conf.d
    >ln -s /etc/fonts/conf.avail/11-lcdfilter-default.conf  /etc/fonts/conf.d
    Alppearance : Fonts (tab) -> Fixed width font -> select "Monospace regular 11" .
    Mate Desktop -> System -> Preferances -> Look and Feel -> 
    
    Troubleshooting :
        Linux stroes a ZIP's cKernel configuration file  in /proc/config.gz
    > zcat  /proc/config.gz
    > zcat /proc/config.gz | grep PHY
    
    Adding USB WebCam:
     -- lsusb -vv -s <BDF for USB> to see camera
     -- dmesg also shows USB Camera
     -- v4l2-ctl --list-devices (THere appears to be a reliability issue  and might take a few attempts - need to troubleshoot)
        THis command will show the camera listed 
     -- v4l2-ctl -d /dev/video0 --all (THis displays all controlable parameters and formats)
     - >> v4l2-ctl -d /dev/video0  --list-formats-ext (to list all supported resolutions)
      - >> v4l2-ctl -d /dev/video0  --set-fmt-video=width=1280,height=480,pixelformat=MJPG (sets  the format to 1280x480)
       - >> v4l2-ctl -d /dev/video0  --get-fmt-video (gfets  the current format to ensure the above commands worked)
       >>v4l2-ctl -d /dev/video0 --list-ctls (To list all  Controlable Camera Parametrets)
       >> v4l2-ctl -d /dev/video0  --set-sharpness=93 (Example of setting sharpnes))
       >> v4l2-ctl -d /dev/video0  --get-sharpness (Example of reading back a parameters))

     -- USB Camera is generallu /dev/video0 , /dev/video1 etc.
     -- Add  user (sanjayr) to video group
     -- sudo usermod -aG video sanjayr (Reboot of ther this)
        -- login as sanjayr , the groups command should noew show video as  one of the groups.
        -- mplayer tv://device=/dev/video  will show  the USB Video  (THere appears to be a reliability issue  and might take a few attempts - need to troubleshoot)
        -- Also vlc v4l2:///dev/vido0  (THere appears to be a reliability issue  and might take a few attempts - need to troubleshoot)
     Basis Video Streaming via ffmpeg : 
     >> ffmpeg -i /dev/video0 -s 1280x480 -reset ultrafast -pix_fmt yuv420p -f mpegts  -flush_packets 0 -r 25 -crf 25 udp://<IP_ADDRESS_OF_RECEIVING_COMPUTER>:5000?pkt_size=1316
     
     of the <Receving _Comoputer> open port 5000 (firewall-cmd --zone=public --permanent 5000/udp  ; frewall-cmd --reload  ; firewall-cmd --list-ports)
      >  vlc  udp://@<IP_ADDRESS_OF_RECEIVING_COMPUTER>:5000
      
      Using  v4l2rtspserver  :
       1. git clone https://github.com/mpromonet/v4l2rtspserver.git
       2. cd v4l2rtspserver && cmake . && make && make install
       3. v4l2rtspserver /dev/video0 &  (v4l2rtspserver --help for options ) default port is 8554
                >> v4l2rtspserver  -W 1280 -H 480 /dev/video0  ( THis is for the  3D Streo Camera)
       4. On any Client  with vlc or other :  
         > vlc rtsp://<IP_Address_of_rtsp_server>:8554/unicast

       

VNCSERVER :
Create a password using vncpasswd which will store the hashed password in ~/.vnc/passwd.
 - Edit /etc/tigervnc/vncserver.users to define user mappings. 
    -- Each user defined in this file will have a corresponding port on which its session will run. 
    -- The number in the file corresponds to a TCP port. By default, :1 is TCP port 5901 (5900+1). 
    -- If another parallel server is needed, a second instance can then run on the next highest, free port, i.e 5902 (5900+2).
 - Create ~/.vnc/config and at a minimum, define the type of session desired with a line like session=foo where foo corresponds to which ever DE is to run. 
   -- One can see which DEs are available on the system by seeing their corresponding .desktop files within /usr/share/xsessions/.
For example:

~/.vnc/config
session=lxdm
geometry=1920x1080
alwaysshared

Starting and stopping tigervnc:
Start vncserver@.service and optionally enable it to run at boot time/shutdown. Note that the display number needs to be specified following the literal @ sign. For :1 it would look like this:

# systemctl start vncserver@:1
Note: Direct calls to /usr/bin/vncserver are not supported as they will not establish a proper session scope. The systemd service is the only supported method of using TigerVNC. See: Issue #1096.

IF there is an unsightly "BLACK Border" around  windows,  open mate-tweak -> windows " Window manager  -> Select "MACRO(Np COmpositor)"
backup and cloning  from _x86_host Linux  Desktop
Insert SdCard into a host Linux server, (assuming /dev/sdg)
dd if=/dev/sdg of=./<BackUpfile_name>.ext4

if the new SdCard is larger, use gparted to resixe/move the Partiton to claim the entire larger SdCard space.

MISC NOTES :
X11 forwarding for sudo users
Just setting the DISPLAY is not enough. X authentication is based on cookies, so it’s necessary to set the cookie used by the user that initiated the connection. The following procedure allows a sudo user to use the ssh based X11 tunnel:

1. Connect the remote host using the -X option with ssh.

# ssh -X root@remote-host
2. Now list the coockie set for the current user.

# xauth list $DISPLAY
node01.thegeekdiary.com/unix:10  MIT-MAGIC-COOKIE-1  dacbc5765ec54a1d7115a172147866aa
# echo $DSIPLAY
localhost:10.0
3. Switch to another user account using sudo. Add the cookie from the command output above to the sudo user.

# sudo su - [user]
# xauth add node01.thegeekdiary.com/unix:10  MIT-MAGIC-COOKIE-1  dacbc5765ec54a1d7115a172147866aa
4. Export the display from step 2 again for the sudo user. Try the command xclock to verify if the x client applications are working as expected.

# export DISPLAY=localhost:10.0
# xclock

ArchLunix / Manjaro Llinux X11 Forwarding
1.  Install xorg-xauth and xorg-xhost

        
21Edit  /etc/ssh/sshd_config file
    X11Forwarding yes
    AllowTcpForwarding yes
    X11UseLocalhost yes
    X11DisplayOffset 10


For Issues where GUI applications work as user(sanjayr) but not as root (or sudo) - for Eg.  >> sudo gparted
    - Log in as root (sudo su)
    - export XAUTHORITY=/home/username/.Xauthority
        * THis could be added to  root (su)   .bashrc file to permanently allow root to connect to a non-root user's X server.



How to Get a WiFI USB Dongle to work on the ZU104 card:

 A. Enable  Kernel drivers for the USB WiFi chipset (in this case RaLink - RA28xx
    > petalinux-config -c kernel
        Device Drivers ->  Network Device Support -> Wireless LAN -> RaLInk Driver Support -> {Select all ralink USB devices}
        
 B.  After the OS boots with ArchLinux install the following:
 0. Check all available ethernet links with :
 >> ip link show
1. In stall wpa_supplicant and dhclient (pacman -S wpa_supplicant  & pacman -S dhclient)
2. create a file  called  /etc/wpa_supplicant/wpa_supplicant.conf  with the following :
 network={
    ssid="do-not-use-me"
    psk="s*******96"
 }
 3. > iwconfig    //to list all the  Wireless Interfaces. look for wlan0 (If the WiFI  USB driver is  correctly included and build with the Linux Kernel the WiFI dongle will show up here)
 4. > sudo wpa_supplicant -B -i wlan0 -c /etc/wpa_supplicant/wpa_supplicant.conf
 5. ifconfig   // Shoul dnow show  wlan0
 6 > sudo dhclient wlan0   // THis will bring up wlan0 and  assign a DHCP  inet IP address 
 7. ifconfig   // wil now list the IP address.
 

Disabling  random  Ethernet MAC Address:
To stop  the MAC addres from  randomly changing every boot
1. > sudo systemctl enable systemd-networkd.service
2. > sudo systemctl start systemd-networkd.service
3. > sudo  vim /etc/systemd/network/eth.network
    Edit this file as follows
    
    [Match]
    Name=eth0
    
    [Network]
    DHCP=yes
    DNSSEC=no
    
    [Link]
    MACAddress=b6:43:d3:1c:9f:48
    
    
  4. The Name=eth0 is based on  ifconfig  interface name. Mac address is either on the card or just madeup !
  5.> sudo reboot

Adding  Yahoo stock_analysis
1. ensure python 3.10.xxx 9pyton --version)
2. pacman -S python-pip
3. pip install dropbox
4. pip install yahooquery
5. git clone git@github.com:SanjayRai/stock_analyzer.git
6. python ./scripts/get_history_from_dropBox.py




